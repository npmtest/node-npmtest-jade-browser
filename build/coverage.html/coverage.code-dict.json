{"/home/travis/build/npmtest/node-npmtest-jade-browser/test.js":"/* istanbul instrument in package npmtest_jade_browser */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jade-browser/lib.npmtest_jade_browser.js":"/* istanbul instrument in package npmtest_jade_browser */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_jade_browser = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_jade_browser = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-jade-browser/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-jade-browser && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_jade_browser */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_jade_browser\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_jade_browser.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_jade_browser.rollup.js'] =\n            local.assetsDict['/assets.npmtest_jade_browser.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_jade_browser.__dirname + '/lib.npmtest_jade_browser.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jade-browser/node_modules/jade-browser/index.js":"var fs = require('fs')\n  , path = require('path')\n  , jade = require('jade')\n  , async = require('async')\n  , glob = require('glob')\n  , parser = require('uglify-js').parser\n  , compiler = require('uglify-js').uglify\n  , Expose = require('./lib/expose')\n  , render = require('./lib/render').render\n  , utils = require('./lib/utils');\n\nmodule.exports = function(exportPath, patterns, options){\n  var options = options || {}\n    , ext = options.ext || 'jade'\n    , namespace = options.namespace || 'jade'\n    , built = false\n    , noCache = options.noCache || false\n    , debug = options.debug || false\n    , minify = options.minify || false\n    , maxAge = options.maxAge || 86400\n    , exportPath = exportPath.replace(/\\/$/,'')\n    , root = path.normalize(options.root ? options.root.replace(/\\/$/,'') : __dirname)\n    , regexp = utils.toRegExp(exportPath, true)\n    , headers = {\n          'Cache-Control': 'public, max-age=' + maxAge\n        , 'Content-Type': 'text/javascript' \n      };\n\n  return function(req, res, next){\n    if (!req.url.match(regexp)) {\n       return next();\n    }\n    \n    if (built && !noCache) {\n      res.writeHead(200, headers);\n      res.end(built);\n    } else {\n      \n      if (typeof patterns == 'string') {\n        patterns = [patterns];\n      }\n      \n      var files = [];\n      patterns.forEach(function(pattern) {\n        pattern = path.join(root, pattern);\n        try {\n          var matches = glob.sync(pattern);\n          matches = matches.filter(function(match) {\n            return match.match(ext + '$');\n          });\n          files = files.concat(matches);\n        } catch(e) {}\n      });\n\n      async.map(files, getTemplate, expose);\n\n      function getTemplate(filename, cb) {\n        \n        fs.readFile(filename, 'utf8', function(err, content){\n          if (err) {\n            return cb(err);\n          }\n\n          var tmpl = jade.compile(content, {\n              filename: filename\n            , inline: false\n            , compileDebug: false\n            , client: true\n          });\n          \n          if (typeof tmpl == 'function') {\n            var fn = 'var jade=window.' + namespace + '; return anonymous(locals);'+ tmpl.toString();\n            fn = new Function('locals', fn);\n            \n            cb(null, {\n                filename: filename\n              , fn: fn\n            });\n          } else {\n            cb(new Error('Failed to compile'));\n          }\n          \n        }); \n      }\n\n      function expose(e, results) {\n        var templates = {}, filename;\n        results.forEach(function(template) {\n          filename = path.relative(root, template.filename);\n          templates[filename] = template.fn;\n        });\n\n        var code = jade.runtime.escape.toString() +';'\n        code += jade.runtime.attrs.toString().replace(/exports\\./g, '') + ';'\n        code += ' return attrs(obj);'\n        \n        var payload = new Expose();\n        payload.expose({\n            attrs: new Function('obj', code)\n          , escape: jade.runtime.escape\n          , dirname: utils.dirname\n          , normalize: utils.normalize\n          , render: render(namespace)\n          , templates: templates\n        }, namespace, 'output');\n        \n        built = payload.exposed('output');\n        \n        if (minify) {\n          var code = parser.parse(built);\n          code = compiler.ast_mangle(code);\n          code = compiler.ast_squeeze(code);\n          built = compiler.gen_code(code);\n        }\n\n        res.writeHead(200, headers);\n        res.end(built);\n      }\n      \n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-jade-browser/node_modules/jade-browser/lib/expose.js":"function Expose(){}\n\nExpose.prototype = {\n  \n  expose: function(obj, namespace, name){\n    var app = this.app || this;\n\n    app._exposed = app._exposed || {};\n\n    // support second arg as name\n    // when a string or function is given\n    if ('string' == typeof obj || 'function' == typeof obj) {\n      name = namespace || name;\n    } else {\n      name = name || name;\n      namespace = namespace || namespace;\n    }\n\n    // buffer string\n    if ('string' == typeof obj) {\n      this.js = this.js || {};\n      var buf = this.js[name] = this.js[name] || [];\n      buf.push(obj);\n    // buffer function\n    } else if ('function' == typeof obj && obj.name) {\n      this.expose(obj.toString(), name);\n    // buffer self-calling function\n    } else if ('function' == typeof obj) {\n      this.expose(';(' + obj + ')();', name);\n    // buffer module object\n    } else if (this._require) {\n      obj = 'module.exports = ' + renderString(obj);\n      this.expose(renderRegister(namespace, obj), name);\n    // buffer object\n    } else {\n      this.expose(renderNamespace(namespace), name);\n      this.expose(renderObject(obj, namespace), name);\n      this.expose('\\n');\n    }\n\n    return this;\n  },\n  \n  exposed: function(name){\n    name = name || exports.name;\n    this.js = this.js || {};\n    return this.js[name]\n      ? this.js[name].join('\\n')\n      : '';    \n  }\n}\n\nfunction renderRegister(mod, js) {\n  return 'require.register(\"'\n    + mod + '\", function(module, exports, require){\\n'\n    + js + '\\n});';\n}\n\nfunction renderNamespace(str){\n  var parts = []\n    , split = str.split('.')\n    , len = split.length;\n \n  return str.split('.').map(function(part, i){\n    parts.push(part);\n    part = parts.join('.');\n    return (i ? '' : 'window.') + part + ' = typeof ' + part + ' !== \\'undefined\\' ? ' + part + ' : {};';\n  }).join('\\n');\n}\n\nfunction renderObject(obj, namespace) {\n  return Object.keys(obj).map(function(key){\n    var val = obj[key];\n    return namespace + '[\"' + key + '\"] = ' + renderString(val) + ';';\n  }).join('\\n');\n}\n\nfunction renderString(obj) {\n  if ('function' == typeof obj) {\n    return obj.toString();\n  } else if (obj instanceof Date) {\n    return 'new Date(\"' + obj + '\")';\n  } else if (Array.isArray(obj)) {\n    return '[' + obj.map(string).join(', ') + ']';\n  } else if ('[object Object]' == Object.prototype.toString.call(obj)) {\n    return '{' + Object.keys(obj).map(function(key){\n      return '\"' + key + '\":' + renderString(obj[key]);\n    }).join(', ') + '}';\n  } else {\n    return JSON.stringify(obj);\n  }\n}\n\nmodule.exports = Expose;","/home/travis/build/npmtest/node-npmtest-jade-browser/node_modules/jade-browser/lib/render.js":"\nfunction render(template, options){\n  var options = options || {}\n    , parent = {};\n    \n  if(!template.match(/\\.jade$/)) template += '.jade';\n  template = ns.normalize(template);\n\n  options.partial = function(path, opts){\n     var opts = (function(a, b){\n        if (a && b) { for (var key in b) { a[key] = (typeof a[key] == 'undefined') ? b[key] : a[key]; } }\n        return a;\n      })(opts || {}, options);\n      \n    if(!path.match(/\\.jade$/)) path += '.jade';\n    path = ns.normalize(path);\n    \n    if(!ns.templates[path]) path = ns.normalize(ns.dirname(template) + path);\n    return ns.render(path, opts);\n  }\n  return ns.templates[template](options);\n}\n\nexports.render = function(ns){\n  var fn = 'var ns= '+ns+'; return render(template, options); '+ render.toString();\n  return new Function('template','options', fn);\n}\n","/home/travis/build/npmtest/node-npmtest-jade-browser/node_modules/jade-browser/lib/utils.js":"var fs = require('fs');\n\nexports.merge = function merge(a, b){\n  if (a && b) {\n    for (var key in b) {\n      a[key] = b[key];\n    }\n  }\n  return a;\n};\n\nexports.dirname = function (path){\n  var dir = /^([\\s\\S]+\\/(?!$)|\\/)?((?:[\\s\\S]+?)?(\\.[^.]*)?)$/.exec(path)[1] || '';\n  if (!dir || dir.length === 1) return '';\n  else return dir;\n}\n\nexports.normalize = function(path) {\n  var isAbsolute = path.charAt(0) === '/',\n      trailingSlash = path.slice(-1) === '/';\n\n  function normalizeArray(parts, allowAboveRoot) {\n    // if the path tries to go above the root, `up` ends up > 0\n    var up = 0;\n    for (var i = parts.length-1; i >= 0; i--) {\n      var last = parts[i];\n      if (last == '.') {\n        parts.splice(i, 1);\n      } else if (last === '..') {\n        parts.splice(i, 1);\n        up++;\n      } else if (up) {\n        parts.splice(i, 1);\n        up--;\n      }\n    }\n    // if the path is allowed to go above the root, restore leading ..s\n    if (allowAboveRoot) {\n      for (; up--; up) {\n        parts.unshift('..');\n      }\n    }\n    return parts;\n  }\n\n  // Normalize the path\n  path = normalizeArray(path.split('/').filter(function(p) { \n    return !!p;\n  })).join('/');\n\n  if (!path && !isAbsolute) path = '.';\n  if (path && trailingSlash) path += '/';\n  \n  return (isAbsolute ? '/' : '') + path;\n};\n\nexports.toRegExp = function toRegExp(str, begin, end){\n   return ((begin) ? '^' : '') +\n    str.replace(/([-.*+?^${}()|[\\]\\/\\\\])/g, '\\\\$1') +\n    ((end) ? '$' : '');\n};\n"}